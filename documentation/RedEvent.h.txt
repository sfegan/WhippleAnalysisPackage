//-*-mode:c++;-*-
/******************************************************************************

	File : RedEvent.h

	Do not edit this file it has been automatically generated 

******************************************************************************/

#ifndef REDEVENT_H
#define REDEVENT_H

#define __STL_USE_NAMESPACES

#include<iostream>
#include<string>
#include<vector>

#ifndef NO_COMPOUND_CH5
#include<hdf5.h>
#endif

#include"Exceptions.h"

namespace NS_Analysis {

using std::iostream;
using std::string;
using std::vector;

// Included for ARRAY(0x81d49f4)
#include"VersionDims.h"

class RedEvent
{
private:

  // DATA MEMBERS

  int m_Code;            /* Trigger code                                     */
  double m_Time;         /* Event time                                       */
  double m_GPSUTC;       /* GPS time in UTC                                  */
  double m_LiveTime;     /* livetime of event                                */
  short m_ADC[492];      /* Raw ADC counts                                   */

  unsigned int m_version;

public:
  typedef unsigned int size_type;   

  unsigned int version() const { return m_version; }
  unsigned int getVersion() const { return m_version; }
  void setVersion(unsigned int v) { m_version=v; }

  inline void zero(void);
  
  RedEvent(): m_version(0) { /* zero(); */ }
	
  ////////////////////////////////////////////////////////////////////////////
  ////////////////////////////// ACCESSORS ///////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////

  // Member: Code
  inline int getCode() const;
  inline int code() const { return getCode(); }
  // Member: Time
  inline double getTime() const;
  inline double time() const { return getTime(); }
  // Member: GPSUTC
  inline double getGPSUTC() const;
  inline double gpsutc() const { return getGPSUTC(); }
  // Member: LiveTime
  inline double getLiveTime() const;
  inline double live_time() const { return getLiveTime(); }
  // Member: ADC
  inline const short* getADC() const { return m_ADC; }
  inline vector<short>& getADC(vector<short>& v) const;
  inline short getADC(size_type n) const;
  inline const short* adc() const { return getADC(); }

  ////////////////////////////////////////////////////////////////////////////
  //////////////////////////// SET ACCESSORS /////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////

  // Member: Code
  inline void setCode(const int& x){ m_Code=x; }
  // Member: Time
  inline void setTime(const double& x){ m_Time=x; }
  // Member: GPSUTC
  inline void setGPSUTC(const double& x){ m_GPSUTC=x; }
  // Member: LiveTime
  inline void setLiveTime(const double& x){ m_LiveTime=x; }
  // Member: ADC
  inline void setADC(const short* x);
  inline void setADC(const vector<short>& v);
  inline void setADC(const short& x, size_type n);

  ////////////////////////////////////////////////////////////////////////////
  ////////////////////////// MEMBER DIMENSIONS ///////////////////////////////
  ////////////////////////////////////////////////////////////////////////////

  // There may not be any functions here if there are no members that are
  // arrays. Don't be scared if there aren't
  inline static size_type sizeADC(unsigned int v);

  size_type sizeADC() const { return sizeADC(version()); }

  ////////////////////////////////////////////////////////////////////////////
  /////////////////////////// VERSION CHECKS /////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////

  inline static bool hasCode(unsigned int v) { return true; }
  inline static bool hasTime(unsigned int v) { return true; }
  inline static bool hasGPSUTC(unsigned int v) { return true; }
  inline static bool hasLiveTime(unsigned int v) { return true; }
  inline static bool hasADC(unsigned int v) { return true; }

  bool hasCode() const { return hasCode(version()); }
  bool hasTime() const { return hasTime(version()); }
  bool hasGPSUTC() const { return hasGPSUTC(version()); }
  bool hasLiveTime() const { return hasLiveTime(version()); }
  bool hasADC() const { return hasADC(version()); }

  ostream& streamDumpLong(ostream& stream) const;
  ostream& streamDumpShort(ostream& stream) const;

#ifndef NO_COMPOUND_CH5
  //---------------------------------------------------------------------------
  // Create HDF5 compound datatypes for this structure. The two static members
  // create H5 compound types for the internal representaion of this class and
  // for the Little-Endian (INTEL ARCHICTECTURE) that is stored on disk.
  //---------------------------------------------------------------------------

public:
  static hid_t compoundCH5Core(unsigned int version);  // HDF5 NATIVE UNPACKED
  static hid_t compoundCH5Disk(unsigned int version, 
                               bool pack=true);        // HDF5 INTEL PACKED 
#endif /* NO_COMPOUND_H5 */
};

// Dump the attributes to an output stream
ostream& operator<<(ostream& stream, const RedEvent& me);

} /* namespace NS_Analysis */

inline void NS_Analysis::RedEvent::zero()
{
  m_Code=0;
  m_Time=0;
  m_GPSUTC=0;
  m_LiveTime=0;
  for(int i=0;i<492;i++)m_ADC[i]=0;
}

///////////////////////////////////////////////////////////////////////////////
//////////////////////////////// ACCESSORS ////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

inline int 
NS_Analysis::RedEvent::
getCode() const 
{ 
#ifndef NO_VERSION_CHECK
  if(!hasCode())
    {
      UnsupportedByVersion err("RedEvent::getCode",
                               "Code",version());
      err.stream() << "Element Code is not supported by version " 
                   << version() << " of RedEvent" << endl;
      throw(err);
    }
#endif
  return m_Code; 
}

inline double 
NS_Analysis::RedEvent::
getTime() const 
{ 
#ifndef NO_VERSION_CHECK
  if(!hasTime())
    {
      UnsupportedByVersion err("RedEvent::getTime",
                               "Time",version());
      err.stream() << "Element Time is not supported by version " 
                   << version() << " of RedEvent" << endl;
      throw(err);
    }
#endif
  return m_Time; 
}

inline double 
NS_Analysis::RedEvent::
getGPSUTC() const 
{ 
#ifndef NO_VERSION_CHECK
  if(!hasGPSUTC())
    {
      UnsupportedByVersion err("RedEvent::getGPSUTC",
                               "GPSUTC",version());
      err.stream() << "Element GPSUTC is not supported by version " 
                   << version() << " of RedEvent" << endl;
      throw(err);
    }
#endif
  return m_GPSUTC; 
}

inline double 
NS_Analysis::RedEvent::
getLiveTime() const 
{ 
#ifndef NO_VERSION_CHECK
  if(!hasLiveTime())
    {
      UnsupportedByVersion err("RedEvent::getLiveTime",
                               "LiveTime",version());
      err.stream() << "Element LiveTime is not supported by version " 
                   << version() << " of RedEvent" << endl;
      throw(err);
    }
#endif
  return m_LiveTime; 
}

// Member: ADC
inline vector<short>& 
NS_Analysis::RedEvent::
getADC(vector<short>& v) const
{
  // Version check is in sizeADC()
  size_type s=sizeADC();
  v.resize(s);
  v.assign(getADC(),getADC()+s);
}

inline short 
NS_Analysis::RedEvent::
getADC(size_type n) const
{
#ifndef NO_RANGE_CHECKS
  // Version check is in sizeADC()
  size_type s=sizeADC();
  if((n<0)||(n>=s))
    {
      OutOfRange err("RedEvent::getADC",n);
      err.stream() << "Attempt to access element ADC[" << n 
	           <<"] is out of range in version " << version() 
                   << " of RedEvent" << endl;
      throw(err);
    }
#else
#ifndef NO_VERSION_CHECK
  // Do version check here if we aren't doing size checking
  if(!hasADC())
    {
      UnsupportedByVersion err("RedEvent::getADC",
                               "ADC",version());
      err.stream() << "Element ADC is not supported by version " 
                   << version() << " of RedEvent" << endl;
      throw(err);
    }
#endif
#endif
  return *(getADC()+n);
}

///////////////////////////////////////////////////////////////////////////////
////////////////////////////// SET ACCESSORS //////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

// There may not be any functions here if there are no members that are
// arrays or strings. Don't be scared if there aren't

// Member: ADC
inline void 
NS_Analysis::RedEvent::
setADC(const short* x)
{
  size_type s=sizeADC();
  for(int i=0;i<s;i++)m_ADC[i]=x[i];
}

inline void 
NS_Analysis::RedEvent::
setADC(const vector<short>& v)
{
  size_type s=sizeADC();
  size_type n=v.size();
#ifndef NO_RANGE_CHECKS
  if(n!=s)
    {
      OutOfRange err("RedEvent::getADC",n);
      err.stream() << "Attempt to access element ADC[" << n 
	           <<"] is out of range in version " << version() 
                   << " of RedEvent" << endl;
      throw(err);
    }
#endif
  for(int i=0;i<n;i++)m_ADC[i]=v[i];
}

inline void 
NS_Analysis::RedEvent::
setADC(const short& x,size_type n)
{
  size_type s=sizeADC();
#ifndef NO_RANGE_CHECKS
  if((n<0)||(n>=s))
    {
      OutOfRange err("RedEvent::getADC",n);
      err.stream() << "Attempt to access element ADC[" << n 
	           <<"] is out of range in version " << version() 
                   << " of RedEvent" << endl;
      throw(err);
    }
#endif
  m_ADC[n]=x;
}

///////////////////////////////////////////////////////////////////////////////
//////////////////////////// MEMBER DIMENSIONS ////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

// There may not be any functions here if there are no members that are
// arrays. Don't be scared if there aren't

inline NS_Analysis::RedEvent::size_type 
NS_Analysis::RedEvent::
sizeADC(unsigned int v)
{
#ifndef NO_VERSION_CHECK
  if(!hasADC(v))
    {
      UnsupportedByVersion err("RedEvent::getADC",
                               "ADC",v);
      err.stream() << "Element ADC is not supported by version " 
                   << v << " of RedEvent" << endl;
      throw(err);
    }
#endif
  size_type s;
  s=NS_Analysis::VersionToADCNumber(v);
#ifndef NO_RANGE_CHECKS
  if(s>492)
    {
      OutOfRange err("RedEvent::sizeADC",s);
      err.stream() << "\"Very-Strange-Error\" error. It seemed that "
                   << "the dimension function for this class (NS_Analysis::VersionToADCNumber) "
                   << "returned a size > maxdimensions (" 
                   << s << " > 492)" << endl;
      throw err;
    }
#endif
  return s;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////// VERSION CHECKS //////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

#endif /* REDEVENT_H */
