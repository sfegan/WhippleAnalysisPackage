/******************************************************************************

        File : RedEvent.cxx

        Do not edit this file it has been automatically generated

******************************************************************************/

#define __STL_USE_NAMESPACES

#include <iostream>

#ifdef COMPOUND_H5
#include<hdf5.h>
#endif

#include"RedEvent.h"

ostream& 
NS_Analysis::operator<<(ostream& stream, const RedEvent& me)
{
  me.streamDumpLong(stream);
  return stream;
}

ostream& 
NS_Analysis::RedEvent::streamDumpLong(ostream& stream) const
{
  stream << "Code: ";
  stream << getCode();
  stream << "\n";
  stream << "Time: ";
  stream << getTime();
  stream << "\n";
  stream << "GPSUTC: ";
  stream << getGPSUTC();
  stream << "\n";
  stream << "LiveTime: ";
  stream << getLiveTime();
  stream << "\n";
  stream << "ADC: ";
  for(int i=0;i<sizeADC();i++)
    {
      stream << getADC(i);
      if(i!=(sizeADC()-1)) stream << ' ';
    }
  stream << "\n";
  return stream;
}

ostream& 
NS_Analysis::RedEvent::streamDumpShort(ostream& stream) const
{
  stream << getCode();
  stream << '\t';
  stream << getTime();
  stream << '\t';
  stream << getGPSUTC();
  stream << '\t';
  stream << getLiveTime();
  stream << '\t';
  for(int i=0;i<sizeADC();i++)
    {
      stream << getADC(i);
    }
  stream << '\t';
  return stream;
}

#ifndef NO_COMPOUND_CH5
//-----------------------------------------------------------------------------
// Create the *unpacked* HDF5 memory representation of this structure... uses
// NATIVE types which are required when manipulating data in memory.
//-----------------------------------------------------------------------------

hid_t 
NS_Analysis::RedEvent::
compoundCH5Core(unsigned int version)
{
  herr_t err;
  size_t dims[4];
  hid_t temp_hid_t;
  hid_t h5type_core;
  unsigned int v=version;

  h5type_core=H5Tcreate(H5T_COMPOUND,sizeof(RedEvent));
  if(h5type_core<0)return(h5type_core);


  /* m_Code -> Code */
  err=H5Tinsert(h5type_core, "Code",
                HOFFSET(RedEvent,m_Code), 
                H5T_NATIVE_INT); 
  if(err<0)return(err);

  /* m_Time -> Time */
  err=H5Tinsert(h5type_core, "Time",
                HOFFSET(RedEvent,m_Time), 
                H5T_NATIVE_DOUBLE); 
  if(err<0)return(err);

  /* m_GPSUTC -> GPSUTC */
  err=H5Tinsert(h5type_core, "GPSUTC",
                HOFFSET(RedEvent,m_GPSUTC), 
                H5T_NATIVE_DOUBLE); 
  if(err<0)return(err);

  /* m_LiveTime -> LiveTime */
  err=H5Tinsert(h5type_core, "LiveTime",
                HOFFSET(RedEvent,m_LiveTime), 
                H5T_NATIVE_DOUBLE); 
  if(err<0)return(err);

  /* m_ADC -> ADC */
  dims[0]=sizeADC(version);
#if ((H5_VERS_MAJOR > 1) || ((H5_VERS_MAJOR == 1)&&(H5_VERS_MINOR >= 4)))
  temp_hid_t=H5Tarray_create( H5T_NATIVE_SHORT, 1, dims, NULL);
  err=H5Tinsert(h5type_core, "ADC",
                HOFFSET(RedEvent,m_ADC), temp_hid_t);
#else
  err=H5Tinsert_array(h5type_core,"ADC", 
                      HOFFSET(RedEvent,m_ADC), 
                      1, dims, NULL, H5T_NATIVE_SHORT);
#endif
  if(err<0)return(err);

  return h5type_core;
}

//-----------------------------------------------------------------------------
// Create the packed HDF5 disk representation of this structure... uses INTEL
// type Little-Endian data types to adhere to standards for VERITAS arch.
//-----------------------------------------------------------------------------

hid_t 
NS_Analysis::RedEvent::
compoundCH5Disk(unsigned int version, bool pack=true)
{
  herr_t err;
  size_t dims[4];
  hid_t temp_hid_t;
  hid_t h5type_disk;
  unsigned int v=version;

  h5type_disk=H5Tcreate(H5T_COMPOUND,sizeof(RedEvent));
  if(h5type_disk<0)return(h5type_disk);


  /* m_Code -> Code */
  err=H5Tinsert(h5type_disk, "Code",
                HOFFSET(RedEvent,m_Code), 
                H5T_STD_I32LE);
  if(err<0)return(err);

  /* m_Time -> Time */
  err=H5Tinsert(h5type_disk, "Time",
                HOFFSET(RedEvent,m_Time), 
                H5T_IEEE_F64LE);
  if(err<0)return(err);

  /* m_GPSUTC -> GPSUTC */
  err=H5Tinsert(h5type_disk, "GPSUTC",
                HOFFSET(RedEvent,m_GPSUTC), 
                H5T_IEEE_F64LE);
  if(err<0)return(err);

  /* m_LiveTime -> LiveTime */
  err=H5Tinsert(h5type_disk, "LiveTime",
                HOFFSET(RedEvent,m_LiveTime), 
                H5T_IEEE_F64LE);
  if(err<0)return(err);

  /* m_ADC -> ADC */
  dims[0]=sizeADC(version);
#if ((H5_VERS_MAJOR > 1) || ((H5_VERS_MAJOR == 1)&&(H5_VERS_MINOR >= 4)))
  temp_hid_t=H5Tarray_create( H5T_STD_I16LE, 1, dims, NULL);
  err=H5Tinsert(h5type_disk, "ADC",
                HOFFSET(RedEvent,m_ADC), temp_hid_t);
#else
  err=H5Tinsert_array(h5type_disk,"ADC", 
                      HOFFSET(RedEvent,m_ADC), 
                      1, dims, NULL, H5T_STD_I16LE);
#endif
  if(err<0)return(err);

  if(pack)H5Tpack(h5type_disk);

  return h5type_disk;
}
#endif /* NO_COMPOUND_CH5 */
