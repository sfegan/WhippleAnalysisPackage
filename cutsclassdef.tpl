@perl use lib ".";
@perl use Utility;
@//
@// Generate the class structures
@//
@foreach class_list          

@perl $myfilename="Cuts".${class_name};
@perl $myexclusion=uc($myfilename."_h");
@perl print "Generating $myfilename.h\n";
@openfile $myfilename.h
//-*-mode:c++; mode:font-lock;-*-
/******************************************************************************

	File : $myfilename.h

	Do not edit this file it has been automatically generated 

******************************************************************************/

#ifndef $myexclusion
#define $myexclusion

#define __STL_USE_NAMESPACES

#include "${class_name}.h"
#include "BaseCuts${class_name}.h"

namespace NS_Analysis {

  class CutsPassed${class_name}
  {
  private:
  @foreach attr_list 
    @if((defined $cuts)&&(($cuts eq "both")||($cuts eq "lower")))
    bool m_passed_lower_${attr_name};
    @endif
    @if((defined $cuts)&&(($cuts eq "both")||($cuts eq "upper")))
    bool m_passed_upper_${attr_name};
    @endif
  @end

  public:
    void zero();
  @foreach attr_list 
    @if((defined $cuts)&&(($cuts eq "both")||($cuts eq "lower")))
    void setPassedLower${attr_name}() { m_passed_lower_${attr_name}=true; }
    bool passedLower${attr_name}() const { return m_passed_lower_${attr_name}; }
    @endif
    @if((defined $cuts)&&(($cuts eq "both")||($cuts eq "upper")))
    void setPassedUpper${attr_name}() { m_passed_upper_${attr_name}=true; }
    bool passedUpper${attr_name}() const { return m_passed_upper_${attr_name}; }
    @endif
  @end
  };

  class Cuts${class_name}: public BaseCuts${class_name}
  {
  public:
    typedef enum { LOWER_CUT, UPPER_CUT } CutBound;

    // Apply cuts to ${class_name}
    bool test(const ${class_name}& param) const;
    bool test(const ${class_name}& param, CutsPassed${class_name}& list) const;

    // Get cuts values
    bool isCutEnabled(const string& cut, CutBound bound) const;
    void getCutValue(const string& cut, CutBound bound, string& value) const;

    // Add,enable,disable cuts
    void set(const string& cut, const string& value);

    void setCutValue(const string& cut, CutBound bound, const string& value);
    void setCutEnable(const string& cut, CutBound bound, bool enable=true);

    // Display cuts
    void streamDumpCuts(ostream& stream) const;

    // Set cuts from command line
    void setCutsFromCommandLine(int& argc, char **argv, 
                                const string& Prefix="Cuts${class_name}");
  }; // Cuts${class_name}

} // namespace NS_Analysis

#endif /* $myexclusion */
@perl print "Generating $myfilename.cxx\n";
@openfile $myfilename.cxx
//-*-mode:c++; mode:font-lock;-*-
/******************************************************************************

	File : $myfilename.cxx

	Do not edit this file it has been automatically generated 

******************************************************************************/

#include <list>
#include <sstream>
#include <hdf5/hdf5.h>

#include "Exceptions.h"
#include "$myfilename.h"

using std::list;
using std::string;
using std::istringstream;

bool 
NS_Analysis::Cuts${class_name}::
isCutEnabled(const string& cut, CutBound bound) const
{
  if(0)
    {
    }
  @foreach attr_list 
    @if(defined $cuts)
  else if(cut == "${attr_name}")
    {
      if(bound==UPPER_CUT)
      @if((defined $cuts)&&(($cuts eq "both")||($cuts eq "upper")))
        return getApplyUpperCut${attr_name}();
      @else
        {
          UnrecognisedParameter err("Cuts${class_name}::isCutEnabled",
                                    cut);
          err.stream() << "Requested cut UPPER " << '"' << cut << '"'
              << " is not part of class Cuts${class_name}" << endl;
          throw err;
        }      
      @endif
      else
      @if((defined $cuts)&&(($cuts eq "both")||($cuts eq "lower")))
        return getApplyLowerCut${attr_name}();
      @else
        {
          UnrecognisedParameter err("Cuts${class_name}::isCutEnabled",
                                    cut);
          err.stream() << "Requested cut LOWER " << '"' << cut << '"'
              << " is not part of class Cuts${class_name}" << endl;
          throw err;
        }      
      @endif
    }
    @endif
  @end
  else
    {
      UnrecognisedParameter err("Cuts${class_name}::isCutEnabled",
                                cut);
      err.stream() << "Requested cut " << '"' << cut << '"'
          << " is not part of class Cuts${class_name}" << endl;
      throw err;
    }
  return false;
}

void
NS_Analysis::Cuts${class_name}::
getCutValue(const string& cut, CutBound bound, string &value) const
{
  if(0)
    {
    }
  @foreach attr_list 
    @if(defined $cuts)
  else if(cut == "${attr_name}")
    {
      ostringstream ost;
      if(bound==UPPER_CUT)
      @if((defined $cuts)&&(($cuts eq "both")||($cuts eq "upper")))
        ost << getUpperCut${attr_name}();
      @else
        {
          UnrecognisedParameter err("Cuts${class_name}::getCutValue",
                                    cut);
          err.stream() << "Requested cut UPPER " << '"' << cut << '"'
              << " is not part of class Cuts${class_name}" << endl;
          throw err;
        }      
      @endif      
      else 
      @if((defined $cuts)&&(($cuts eq "both")||($cuts eq "lower")))
        ost << getLowerCut${attr_name}();
      @else
        {
          UnrecognisedParameter err("Cuts${class_name}::getCutValue",
                                    cut);
          err.stream() << "Requested cut LOWER " << '"' << cut << '"'
              << " is not part of class Cuts${class_name}" << endl;
          throw err;
        }      
      @endif
      value = ost.str();
    }
    @endif
  @end
  else
    {
      UnrecognisedParameter err("Cuts${class_name}::getCutValue",
                                cut);
      err.stream() << "Requested cut " << '"' << cut << '"'
          << " is not part of class Cuts${class_name}" << endl;
      throw err;
    }
}

void
NS_Analysis::Cuts${class_name}::
setCutEnable(const string& cut, CutBound bound, bool enable)
{
  if(0)
    {
    }
  @foreach attr_list 
    @if(defined $cuts)
  else if(cut == "${attr_name}")
    {
      if(bound==UPPER_CUT)
      @if((defined $cuts)&&(($cuts eq "both")||($cuts eq "upper")))
        setApplyUpperCut${attr_name}(enable);
      @else
        {
          UnrecognisedParameter err("Cuts${class_name}::setCutEnable",
                                    cut);
          err.stream() << "Requested cut UPPER " << '"' << cut << '"'
              << " is not part of class Cuts${class_name}" << endl;
          throw err;
        }      
      @endif      
      else 
      @if((defined $cuts)&&(($cuts eq "both")||($cuts eq "lower")))
        setApplyLowerCut${attr_name}(enable);
      @else
        {
          UnrecognisedParameter err("Cuts${class_name}::setCutEnable",
                                    cut);
          err.stream() << "Requested cut LOWER " << '"' << cut << '"'
              << " is not part of class Cuts${class_name}" << endl;
          throw err;
        }      
      @endif
    }
    @endif
  @end
  else
    {
      UnrecognisedParameter err("Cuts${class_name}::setCutEnable",
                                cut);
      err.stream() << "Requested cut " << '"' << cut << '"'
          << " is not part of class Cuts${class_name}" << endl;
      throw err;
    }
}

void
NS_Analysis::Cuts${class_name}::
setCutValue(const string& cut, CutBound bound, const string& value)
{
  if(0)
    {
    }
  @foreach attr_list 
    @if(defined $cuts)
  else if(cut == "${attr_name}")
    {
      istringstream ist(value);
      @perl $ctype=Utility::MType($attr_type);
      $ctype typedvalue;
      ist >> typedvalue;
      if(bound==UPPER_CUT)
      @if((defined $cuts)&&(($cuts eq "both")||($cuts eq "upper")))
        setUpperCut${attr_name}(typedvalue);
      @else
        {
          UnrecognisedParameter err("Cuts${class_name}::setCutValue",
                                    cut);
          err.stream() << "Requested cut UPPER " << '"' << cut << '"'
              << " is not part of class Cuts${class_name}" << endl;
          throw err;
        }      
      @endif      
      else 
      @if((defined $cuts)&&(($cuts eq "both")||($cuts eq "lower")))
	setLowerCut${attr_name}(typedvalue);
      @else
        {
          UnrecognisedParameter err("Cuts${class_name}::setCutValue",
                                    cut);
          err.stream() << "Requested cut LOWER " << '"' << cut << '"'
              << " is not part of class Cuts${class_name}" << endl;
          throw err;
        }      
      @endif
    }
    @endif
  @end
  else
    {
      UnrecognisedParameter err("Cuts${class_name}::setCutValue",
                                cut);
      err.stream() << "Requested cut " << '"' << cut << '"'
          << " is not part of class Cuts${class_name}" << endl;
      throw err;
    }
}

void 
NS_Analysis::Cuts${class_name}::
set(const string& cut, const string& value)
{
  if(cut.substr(0,8)=="UpperCut")
    {
      setCutValue(cut.substr(8),UPPER_CUT,value);
      setCutEnable(cut.substr(8),UPPER_CUT,true);
    }
  else if(cut.substr(0,8)=="LowerCut")
    {
      setCutValue(cut.substr(8),LOWER_CUT,value);
      setCutEnable(cut.substr(8),LOWER_CUT,true);
    }
  else if(cut.substr(0,13)=="ApplyUpperCut")
    {
      bool apply=(value=="true");
      setCutEnable(cut.substr(13),UPPER_CUT,apply);
    }
  else if(cut.substr(0,13)=="ApplyLowerCut")
    {
      bool apply=(value=="true");
      setCutEnable(cut.substr(13),LOWER_CUT,apply);
    }
  else
    {
      UnrecognisedParameter err("Cuts${class_name}::set",
                                cut);
      err.stream() << "Requested cut " << '"' << cut << '"'
          << " is not part of class Cuts${class_name}" << endl;
      throw err;
    }
}


void
NS_Analysis::Cuts${class_name}::
setCutsFromCommandLine(int& argc, char **argv, 
                       const string& Prefix)
{
  string prefix=Prefix+"::";

  list<char*> optlist;
  for(int i=0;i<argc;i++)optlist.push_back(argv[i]);

  list<char*>::iterator opti=optlist.begin();

  while(opti != optlist.end())
    {
      string opt(*opti);

      if(opt[0]=='-')
        {
          opt.erase(0,1);
          if(opt[0]=='-')opt.erase(0,1);
          if(opt.substr(0,prefix.size())==prefix)
            {
              opt.erase(0,prefix.size());

              bool skip_two=false;

              string::size_type found=opt.find('=');

              string arg;
              if(found != string::npos)
                {
                  arg=opt.substr(found+1);
                  opt.erase(found);
                }
              else
                {
                  list<char*>::iterator next=opti;
                  next++;
                  arg=*next;
                  skip_two=true;
                }

              set(opt,arg);

              list<char*>::iterator next=opti;
              next++;
              optlist.erase(opti);
              opti=next;

              if(skip_two)
                {
                  next=opti;
                  next++;
                  optlist.erase(opti);
                  opti=next;
                }
            }
          else 
            {
              // save this option on the command line
              opti++;
            }
        }
      else 
        {
          // save this option on the command line
          opti++;          
        }
    }  

  opti=optlist.begin();
  argc=0;
  while(opti != optlist.end())
    {
      argv[argc]=*opti;
      opti++;
      argc++;
    }
  argv[argc]=0;
}    

void
NS_Analysis::CutsPassed${class_name}::
zero()
{
  @foreach attr_list 
    @if((defined $cuts)&&(($cuts eq "both")||($cuts eq "lower")))
  m_passed_lower_${attr_name}=false;
    @endif
    @if((defined $cuts)&&(($cuts eq "both")||($cuts eq "upper")))
  m_passed_upper_${attr_name}=false;
    @endif
  @end
}

bool
NS_Analysis::Cuts${class_name}::
test(const ${class_name}& param) const
{
  @foreach attr_list 
    @if((defined $cuts)&&(($cuts eq "both")||($cuts eq "lower")))
  if((getApplyLowerCut${attr_name}())&&
     (param.get${attr_name}()<getLowerCut${attr_name}()))return false;
    @endif
    @if((defined $cuts)&&(($cuts eq "both")||($cuts eq "upper")))
  if((getApplyUpperCut${attr_name}())&&
     (param.get${attr_name}()>getUpperCut${attr_name}()))return false;
    @endif
  @end
  return true;
}

bool
NS_Analysis::Cuts${class_name}::
test(const ${class_name}& param, CutsPassed${class_name}& list) const
{
  bool passed=true;
  list.zero();
  @foreach attr_list 
    @if((defined $cuts)&&(($cuts eq "both")||($cuts eq "lower")))

  if(getApplyLowerCut${attr_name}())
    {
      if(param.get${attr_name}()<getLowerCut${attr_name}())passed=false;
      else list.setPassedLower${attr_name}();
    }
  else list.setPassedLower${attr_name}();
    @endif
    @if((defined $cuts)&&(($cuts eq "both")||($cuts eq "upper")))

  if(getApplyUpperCut${attr_name}())
    {
      if(param.get${attr_name}()>getUpperCut${attr_name}())passed=false;
      else list.setPassedUpper${attr_name}();
    }
  else list.setPassedUpper${attr_name}();
    @endif
  @end

  return passed;
}

void
NS_Analysis::Cuts${class_name}::
streamDumpCuts(ostream& stream) const
{
  @foreach attr_list 
    @if((defined $cuts)&&(($cuts eq "both")||($cuts eq "lower")))

  if(getApplyLowerCut${attr_name}())
    stream << getLowerCut${attr_name}() << " < ";
    @endif
    @if(defined $cuts)

  if(
      @if(($cuts eq "both")||($cuts eq "lower"))
     (getApplyLowerCut${attr_name}()) 
      @else
     (0)
      @endif
     || 
      @if(($cuts eq "both")||($cuts eq "upper"))
     (getApplyUpperCut${attr_name}())
      @else
     (0)
      @endif
    )
    stream << "${attr_name}";
    @endif 
    @if((defined $cuts)&&(($cuts eq "both")||($cuts eq "upper")))

  if(getApplyUpperCut${attr_name}())
    stream << " < " << getUpperCut${attr_name}();
    @endif
    @if(defined $cuts)

  if(
      @if(($cuts eq "both")||($cuts eq "lower"))
     (getApplyLowerCut${attr_name}()) 
      @else
     (0)
      @endif
     || 
      @if(($cuts eq "both")||($cuts eq "upper"))
     (getApplyUpperCut${attr_name}())
      @else
     (0)
      @endif
    )
    stream << endl;
    @endif 
  @end
}
@end
